@page "/cart"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject ICustomerData customerData
@inject IOrderStatusData orderStatusData
@inject IOrderData orderData
@inject IProductData productData
@inject IModalService modal

<div class="container bg-white text-black w-25 rounded-pill mb-5 mt-4">
    <h2 class="bg-white text-black text-center text-uppercase rounded-pill">Cart</h2>
</div>


<div class="container">
    <div class="row bg-white text-black rounded-3 mb-4 shadow-lg ">
        @if (loggedInCustomer?.ShoppingCart.Count > 0)
        {
            <table class="table table-bordered mt-2 ">
                <thead>
                    <tr>
                        <th class ="text-center" scope="col">Name</th>
                        <th class="text-center" scope="col">Price</th>
                        <th class="text-center" scope="col">Remove from cart</th>
                    </tr>
                </thead>
                <tbody>
                        @foreach (var product in loggedInCustomer.ShoppingCart)
                        {
                            <tr>
                                <td class="col-4 text-center">
                                    @product.Name <br>
                                    
                                    @if (product.Category.Name == "Pizza")
                                    {


                                        List<IngredientModel> ingredients = customerData.GetPizzaIngredientsFromShoppingcart(loggedInCustomer, loggedInCustomer.ShoppingCart.IndexOf(product)).Result;
                                        foreach (var ingredient in ingredients)
                                        {
                                        @ingredient.Name
                                        if (ingredients.IndexOf(ingredient) != ingredients.Count -1)
                                        {
                                            @(", ")
                                        }
                                        }
                                        <button class="btn btn-secondary " @onclick="(() => CustomizePizza(loggedInCustomer.ShoppingCart.IndexOf(product)))">Customize</button>
                                    }
                                    
                                </td>
                                <td class="col-4 text-center align-middle">
                                        @product.Price.ToString()
                                </td>

                            <td class="col-4 text-center align-middle">
                                        <button class="btn btn-danger" @onclick="(() => RemoveFromCart(product))">Remove</button>
                                </td>
                            </tr>
                        }
                    
                </tbody>
            </table>
            <p>Total: @GetShoppingcartTotal()</p>
        }
        else
        {
            <p class="m-2 p-0 text-center">Your shoppingcart is empty.</p>
        }
    </div>
</div>
    
<div class="container bg-white text-black rounded-3 p-3 shadow-lg ">
    <form>
        @if(basicCustomer is not null)
        {
            <div class="form-floating p-1">
                <input type="text" id="city" class="form-control" placeholder="City" @bind-value="basicCustomer.Address.City">
                <label for="city" class="form-label">City</label>
            </div>

            <div class="form-floating p-1">
                <input type="text" id="address" class="form-control" placeholder="Street, house" @bind-value="basicCustomer .Address.Street">
                <label for="address" class="form-label">Street, house</label>
            </div>


            <div class="form-check">
                Pays with card <input type="checkbox" class="form-check-input"@bind-value="order.PaysWithCash">
            </div>

            <label for="phoneNum">Phone number</label>
            <div class="input-group">
                <div class="input-group-text ">+36</div>
                <input type="number" id="phoneNum" class="form-control" @bind-value="basicCustomer.PhoneNumber">
            </div>

            <div class="mt-2">
                <label for="note" class="form-label">Note</label>
                <textarea type="textarea" id="note" class="form-control" @bind="order.Description"></textarea>
            </div>

            <button class="btn btn-primary w-100 mt-3" @onclick="(() => CreateOrder())">Order</button>
        }
    </form>
</div>


@code {
    //phonemun restrict, order->modal message + email,

    private BasicCustomerModel basicCustomer;
    private OrderModel order = new();
    private CustomerModel loggedInCustomer;
    private List<OrderStatusModel> orderStatuses;
    private List<ProductPizzaModel> allPizzas;

    protected async override Task OnInitializedAsync()
    {
        loggedInCustomer = await authProvider.GetCustomerFromAuth(customerData);
        orderStatuses = await orderStatusData.GetAllOrderStatuses();
        allPizzas = await productData.GetProductsByType(new ProductPizzaModel());
        InitializeBasicCustomerInfo();
    }

    private void InitializeBasicCustomerInfo()
    {
        basicCustomer = new BasicCustomerModel();
        basicCustomer.Id = loggedInCustomer.Id;
        basicCustomer.Address = loggedInCustomer.Address;
        basicCustomer.PhoneNumber = loggedInCustomer.PhoneNumber;
    }

    private async Task RemoveFromCart(ProductModel product)
    {
        loggedInCustomer?.ShoppingCart.Remove(product);
        await customerData.UpdateCustomer(loggedInCustomer);
    }

    private async Task CreateOrder()
    {
        if (loggedInCustomer.ShoppingCart.Count == 0) return;

        await CheckPhoneNumber();

        order.Customer = basicCustomer;
        order.Products = loggedInCustomer.ShoppingCart;
        order.Total = GetShoppingcartTotal();
        order.Date_0 = DateTime.Now;
        order.OrderStatus = orderStatuses.Where(x => x.Name == "Processing").FirstOrDefault();

        await orderData.CreateOrder(order);

        loggedInCustomer.ShoppingCart.Clear();
        await customerData.UpdateCustomer(loggedInCustomer);

        StateHasChanged();
    }

    private async Task CheckPhoneNumber()
    {
        //Add phoneNum to db
        if (basicCustomer.PhoneNumber != loggedInCustomer.PhoneNumber)
        {
            loggedInCustomer.PhoneNumber = basicCustomer.PhoneNumber;
            await customerData.UpdateCustomer(loggedInCustomer);
        }
    }

    private async Task CustomizePizza(int productIndex)
    {
        var param = new ModalParameters();
        param.Add(nameof(productIndex), productIndex);

        var options = new ModalOptions()
        {
            Size = ModalSize.Large
        };
        var m = modal.Show<PizzaCustomizeModal>("Customize Pizza",param,options);
        var result = await m.Result;

        if (result.Confirmed)
        {
            loggedInCustomer = await customerData.GetCustomer(loggedInCustomer.Id);
            StateHasChanged();
        }
    }

    private int GetShoppingcartTotal()
    {
        var total = 0;
        foreach (var item in loggedInCustomer?.ShoppingCart)
        {
            total += item.Price;
        }
        return total;
    }


}
