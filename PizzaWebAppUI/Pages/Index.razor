@page "/"
@inject IDbConnection dbc
@inject IIngredientData ingredientData
@inject IProductData productData

<PageTitle>Index</PageTitle>


<div class="container-wrap">
    <div class="row no-gutters d-flex">

    	<div class="col-lg-6 d-flex">
    		<div class="d-flex">
    			<a href="#" class="img" style="background-image: url(images/pizza-1.jpg);"></a>
    			<div class="text p-4">
    				<h3>Italian Pizza</h3>
    				<p>Far far away, behind the word mountains, far from the countries Vokalia and Consonantia </p>
    				<p class="price"><span>$2.90</span> <a href="#" class="ml-2 btn btn-white btn-outline-white">Order</a></p>
    			</div>
    		</div>
    	</div>

    	<div class="col-lg-6 d-flex ftco-animate">
    		<div class="services-wrap d-flex">
    			<a href="#" class="img" style="background-image: url(images/pizza-2.jpg);"></a>
    			<div class="text p-4">
    				<h3>Greek Pizza</h3>
    				<p>Far far away, behind the word mountains, far from the countries Vokalia and Consonantia</p>
    				<p class="price"><span>$2.90</span> <a href="#" class="ml-2 btn btn-white btn-outline-white">Order</a></p>
    			</div>
    		</div>
    	</div>
    	
    </div>
</div>


@code {
    private List<IngredientModel> ingredients;
    private List<ProductModel> products;

    private IngredientModel i = new IngredientModel() { Name = "sauuuce", Price = 3000 };


    string id = "636cd8df7b7bb7c9b2ded3fe";
    //ProductModel product;

    dynamic product;

    protected async override Task OnInitializedAsync()
    {        
        ingredients = await ingredientData.GetAllIngredients();
        products = await productData.GetAllProducts();
        product = await productData.GetProduct(id);
    }

    private async Task Click()
    {
        await ingredientData.CreateIngredient(i);
        ingredients = await ingredientData.GetAllIngredients();
    }

    

    

}
