@page "/"
@inject AuthenticationStateProvider authProvider
@inject IDbConnection dbc
@inject IIngredientData ingredientData
@inject IProductData productData
@inject ICustomerData customerData

<PageTitle>Index</PageTitle>


<div class="container">
    <div class="row justify-content-center">    
        <div class="btn-group btn-group-lg p-2 w-75">
            <button class="btn btn-primary" @onclick="(()=> ShowPizza(true))">Pizza</button>
            <button class="btn btn-primary" @onclick="(()=> ShowPizza(false))">Drinks</button>
        </div>
    </div>
    <div class="row row-cols-2">
        @if(showPizza)
        {
            @if (pizzas is not null)
            {                
                @foreach (var pizza in pizzas)
                {
                    <div class="col" style="z-index: 0;">
                        <div class=" bg-light text-dark hstack my-2 rounded-3">
                            <div class="m-2 ">
                                <img src="/images/pizzaPlaceholder.jpg" class="img-fluid" alt="Responsive image">
                            </div>
                            <div class="">
                                <h2 class="align-text-top">@pizza.Name</h2>
                                <p>
                                    @foreach (var ingredient in pizza.Ingrediens)
                                    {
                                        string ing = $"{@ingredient.Name} ";
                                        @ing
                                    }
                                </p>
                                <div>@pizza.Price</div>
                            </div>
                            <div class="bg-info" >
                                <AuthorizeView>
                                    <button class="btn btn-primary h-100" @onclick="(() => PutInCart(pizza))">Put in cart</button>
                                </AuthorizeView>
                                
                            </div>
                        </div>                        
                    </div>
                }
            }
        }
        else
        {
            @if (drinks is not null)
            {
                @foreach (var drink in drinks)
                {
                    <div class="col">
                        <div class="bg-light text-dark hstack my-2">
                            <div>
                                <img src="/images/sodaPlaceholder.jpg" class="img-fluid" alt="Responsive image" style="height: 200px; width:200px">
                            </div> 
                            <div>
                                <h2>@drink.Name</h2>
                                <p>
                                    @drink.Size
                                </p>
                                <div>@drink.Price</div>
                            </div>                     
                            <div>
                                <AuthorizeView>
                                    <button class="btn btn-primary" @onclick="(() => PutInCart(drink))">Put in cart</button>
                                </AuthorizeView>
                            </div>                            
                        </div>
                    </div>
                }
            }
        }

    </div>
    <div class="row">

    </div>
</div>


@code {
    //search by ingredient, allergenes, not loggedin -> putincart

    private CustomerModel loggedInCustomer;    
    private List<ProductModel> products;
    private List<ProductPizzaModel> pizzas;
    private List<ProductDrinkModel> drinks;


    private bool showPizza = true;

    protected async override Task OnInitializedAsync()
    {        
        products = await productData.GetAvailableProducts();
        pizzas = await productData.GetAvailabelProductsByType(new ProductPizzaModel());
        drinks = await productData.GetAvailabelProductsByType(new ProductDrinkModel());

        await LoadAndVerifyUser();
    }

    private void ShowPizza(bool input)
    {
        showPizza = input;
    }

    private Task PutInCart(ProductModel product)
    {
        if (loggedInCustomer is not null)
        {
            if (loggedInCustomer.ShoppingCart is null)
                loggedInCustomer.ShoppingCart = new List<ProductModel>();

            loggedInCustomer.ShoppingCart.Add(product);
            return customerData.UpdateCustomer(loggedInCustomer);            
        }

        return null;
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInCustomer = await customerData.GetCustomerFromAuthentication(objectId) ?? new();


            string city = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("city"))?.Value;
            string street = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("street"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;
            AddressModel address = new AddressModel() { City = city, Street = street };

            bool isDirty = false;
            if (objectId.Equals(loggedInCustomer.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInCustomer.ObjectIdentifier = objectId;
            }
            if (address.Equals(loggedInCustomer.Address) == false)
            {
                isDirty = true;               
                loggedInCustomer.Address = address;
            }
            if (email.Equals(loggedInCustomer.Email) == false)
            {
                isDirty = true;
                loggedInCustomer.Email = email;  
            }
            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInCustomer.Id))
                {
                    await customerData.CreateCustomer(loggedInCustomer);
                }
                else
                {
                    await customerData.UpdateCustomer(loggedInCustomer);
                }
            }

        }
    }

}
